"user define

" 将Vundle加入运行时路径中(Runtime path)
set nocompatible     " be iMproved, required
filetype off         " required
"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" " 使用Vundle管理插件，必须
Plugin 'gmarik/Vundle.vim'

"Define bundles via Github repos
" Bundle 'christoomey/vim-run-interactive'
" Bundle 'croaky/vim-colors-github'
" Bundle 'danro/rename.vim'
" Bundle 'kchmck/vim-coffee-script'
" Bundle 'pbrisbin/vim-mkdir'
" Bundle 'slim-template/vim-slim'
" Bundle 'thoughtbot/vim-rspec'
" Bundle 'tpope/vim-bundler'
" Bundle 'tpope/vim-endwise'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-fugitive'
Bundle 'dkprice/vim-easygrep'
Bundle 'scrooloose/syntastic'
Bundle 'sirver/ultisnips'
Bundle 'vim-scripts/tComment'
Bundle 'majutsushi/tagbar'
Bundle 'Lokaltog/vim-powerline'
Bundle 'nono/jquery.vim'
" Bundle 'Valloric/YouCompleteMe'
" Bundle 'ervandew/supertab'
" Bundle 'rdnetto/YCM-Generator'
" Bundle 'tpope/vim-rails'
" Bundle 'tpope/vim-surround'
" Bundle 'vim-ruby/vim-ruby'
" Bundle 'vim-scripts/ctags.vim'
" Bundle 'vim-scripts/matchit.zip'
" Bundle 'mattn/emmet-vim'
" Bundle 'godlygeek/tabular'
" Bundle 'jelera/vim-javascript-syntax'
" Bundle 'altercation/vim-colors-solarized'
" Bundle 'othree/html5.vim'
" Bundle 'xsbeats/vim-blade'
" Bundle 'Raimondi/delimitMate'
" Bundle 'groenewege/vim-less'
" Bundle 'evanmiller/nginx-vim-syntax'
" Bundle 'Lokaltog/vim-easymotion'
" " 其他插件

" javascript support"
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
call vundle#end() " 必须
filetype plugin indent on " 必须
"" Brief help  -- 此处后面都是vundle的使用命令
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" NERD tree
let NERDChristmasTree=0
let NERDTreeWinSize=30
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '\.o$', '\.ko$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos="right"
" Automatically open a NERDTree if no files where specified
autocmd vimenter * if !argc() | NERDTree | endif
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Open a NERDTree
map <F4> :NERDTreeToggle<cr>

" vim-powerline
set laststatus=2
set t_Co=256
let g:Powerline_symbols='fancy'
set guifont=PowerlineSymbols\ for\ Powerline
set statusline+=%{fugitive#statusline()} "  Git Hotness

" ctrple
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.png,*.jpg,*.jpeg,*.gif "MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" set help language
set helplang=cn

" SuperTab
"let g:SuperTabDefaultCompletionType="context"
"let g:SuperTabMappingForward = '<c-space>'
"let g:SuperTabMappingBackward = '<s-c-space>'
"let g:SuperTabDefaultCompletionType = '<c-x><c-u>'

" Trigger configuration
let mapleader = '`'
let g:UltiSnipsUsePythonVersion = 2
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'
let g:UltiSnipsListSnippets = '<C-Tab>'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="context"

" YouCompleter
"let g:ycm_error_symbol = '>>'
"let g:ycm_warning_symbol = '>*'
"let g:ycm_global_ycm_extra_conf = '~/.ycm_c_conf.py'
"nnoremap <Leader>gl :YcmCompleter GoToDeclaration<CR>
"nnoremap <Leader>gf :YcmCompleter GoToDefinition<CR>
"nnoremap <Leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nmap <F3> :YcmDiags<CR>
"
"" configure syntastic syntax checking to check on open as well as save
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"let g:syntastic_always_populate_loc_list = 0
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
"let g:ycm_confirm_extra_conf = 0
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

" minBuf
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplModSelTarget = 1 
"let g:miniBufExplForceSyntaxEnable = 1  
"let g:miniBufExplorerMoreThanOne=2 
map <F7> :cn<cr>
map <F8> :cp<cr>

" theme
let g:molokai_original = 1
let g:rehash256 = 1
colorscheme molokai

" Tagbar
nmap <Leader>tb :TagbarToggle<CR>
"let g:tagbar_ctags_bin='/usr/bin/ctags'
"let g:tagbar_width=30
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

set shell=/bin/sh
"user define end

set termencoding=utf-8
set encoding=prc
set fileencodings=utf-8,gbk,ucs-bom,cp936,chinese

syntax on "
syntax enable
set foldmethod=syntax
set linebreak 
set textwidth=80
set history=50
set ruler
set number
set hlsearch "高亮搜索
set noincsearch "关闭逐步搜索
set noerrorbells
set novisualbell
set vb t_vb= 

"set showmatch
"close visual bell
set foldmethod=marker
set incsearch
set tabstop=4
set shiftwidth=4
set nobackup
set nowritebackup
"set expandtab
"set noswapfile
"set smarttab
set autoindent
set smartindent
"设置在粘贴的时候不自动缩进
"set paste  
set cindent
"set wrap
set cursorline 
set autoread
set mouse=a 
"set the height of command line
set cmdheight=2
"set showtabline=2
"set clipboard+=unnamed
set tabpagemax=20
set laststatus=2
set statusline=\ [PWD]\ %r%{CurrectDir()}%h\ \ [File]\ %f%m%r%h\ %w\ %=[L\ %l,R\ %c,T\ %L]\ %=\ %P
set cul

function! CurrectDir()
    let curdir = substitute(getcwd(), "", "", "g")
    return curdir
endfunction

if has("multi_byte")
    set encoding=utf-8
    set termencoding=utf-8
    set formatoptions+=mM
    set fencs=utf-8,gbk

    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif

    if has("win32")
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif
func Maximize_Window()
endfunc
let Tlist_Ctags_Cmd='/usr/bin/ctags'
if has("gui_running")
	let Tlist_Auto_Open=1 
	colorscheme desert
	set cursorline
    if has("win32")
        set gfn=Raize
        au GUIEnter * simalt ~x
    else
        set guifont=13
    autocmd GUIEnter * winpos 0 0 | set lines=50 columns=100
    endif
else
    colorscheme molokai
endif

if has("autocmd")
    filetype plugin indent on
    augroup vimrcEx
        au!
        autocmd FileType text setlocal textwidth=78
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal g`\"" |
                    \ endif
    augroup END
endif
" key stock
"map tn :tabnext<cr>
"map tp :tabprevious<cr>
"map td :tabnew .<cr>
"map te :tabedit
"map tc :tabclose<cr>
"map cs :!php -l %<cr>

"map <F10> :VSTreeExplore<cr>
"map <F11> :x<cr>
"map <F12> :q!<cr>
" vim: set et sw=4 ts=4 sts=4 fdm=marker ff=unix fenc=utf8
"定义CompileRun函数，用来调用进行编译和运行
map <F5> :call CompileRun()<CR> 
func CompileRun()
exec "w"
"C程序
if &filetype == 'c'
    exec "!gcc %  -o %<"
    exec "!./%<"
endif
endfunc 
map <F6> :TlistToggle<CR>
"map <F6> :call OpenTlist()<CR>
"func OpenTlist()
"if &filetype == 'c'
"    exec "Tlist"
"endif
"endfunc


set cscopequickfix=s-,c-,d-,i-,t-,e-
if has("cscope")
	set csprg=~/local/bin/cscope

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cst

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=1
	set cspc=3

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out  
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose  


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.  
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>    


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>    

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>    
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>    


    " Hitting CTRL-space *twice* before the search type does a vertical 
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>    
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout 
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout 
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

endif

"-- Taglist setting --
let Tlist_Show_One_File=1    "只显示当前文件的tags
let Tlist_WinWidth=30        "设置taglist宽度
let Tlist_Exit_OnlyWindow=1  "tagList窗口是最后一个窗口，则退出Vim
let Tlist_Use_Right_Window=0 "在Vim窗口右侧显示taglist窗口
let Tlist_Auto_Open = 1

set tags=tags
set tags+=./tags
