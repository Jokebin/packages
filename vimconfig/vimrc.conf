"非兼容模式，使用vim，非vi
set nocompatible     " be iMproved, required
filetype off				 " required

" 将Vundle加入运行时路径中(Runtime path)
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

" 使用Vundle管理插件，必须
Plugin 'gmarik/Vundle.vim'

"Define bundles via Github repos
" Bundle 'christoomey/vim-run-interactive'
" Bundle 'croaky/vim-colors-github'
" Bundle 'danro/rename.vim'
" Bundle 'kchmck/vim-coffee-script'
" Bundle 'pbrisbin/vim-mkdir'
" Bundle 'slim-template/vim-slim'
" Bundle 'thoughtbot/vim-rspec'
" Bundle 'tpope/vim-bundler'
" Bundle 'tpope/vim-endwise'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'dkprice/vim-easygrep'
Bundle 'sirver/ultisnips'
Plugin 'honza/vim-snippets'
Bundle 'vim-scripts/tComment'
Bundle 'majutsushi/tagbar'
Bundle 'Lokaltog/vim-powerline'
Bundle 'nono/jquery.vim'
Bundle 'vim-scripts/ctags.vim'
Plugin 'mbbill/echofunc'
Plugin 'WolfgangMehner/c-support'
Plugin 'tpope/vim-surround'
Bundle 'Valloric/YouCompleteMe'
" Bundle 'ervandew/supertab'
" Bundle 'rdnetto/YCM-Generator'
" Bundle 'tpope/vim-rails'
" Bundle 'vim-ruby/vim-ruby'
" Bundle 'vim-scripts/matchit.zip'
" Bundle 'mattn/emmet-vim'
" Bundle 'godlygeek/tabular'
" Bundle 'jelera/vim-javascript-syntax'
" Bundle 'altercation/vim-colors-solarized'
" Bundle 'othree/html5.vim'
" Bundle 'xsbeats/vim-blade'
" Bundle 'groenewege/vim-less'
" Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'Raimondi/delimitMate'
Bundle 'Lokaltog/vim-easymotion'
" " 其他插件

" javascript support"
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
call vundle#end() " 必须

"" Brief help  -- 此处后面都是vundle的使用命令
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" delimitMate
let delimitMate_expand_cr=1

" NERD tree
let NERDChristmasTree=0
let NERDTreeWinSize=35
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '\.o$', '\.ko$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos="left"
" Automatically open a NERDTree if no files where specified
autocmd vimenter * if !argc() | NERDTree | endif
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Open a NERDTree
map <F4> :NERDTreeToggle<cr>
"ERDtree 打开NERD_tree	:ERDtreeClose 关闭NERD_tree
"o 打开关闭文件或者目录	t 在标签页打开
"T 在后台标签页中打开	! 执行此文件
"p 到上层目录			P 到根目录
"K 到第一个节点			J 到最后一个节点
"u 打开上层目录			m 显示文件系统菜单（添加、删除、移动操作）

"nerdcommenter keys
"<leader>cc
"<Leader>cu
"<leader>c<space>
"<leader>cy
let g:NERDSpaceDelims=1

" vim-powerline
set laststatus=2
set t_Co=256
let g:Powerline_symbols='fancy'
set guifont=PowerlineSymbols\ for\ Powerline
set statusline+=%{fugitive#statusline()} "  Git Hotness

" ctrlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.png,*.jpg,*.jpeg,*.gif "MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_working_path_mode = 'rac'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" echofunc
" 使用echofunc的功能需要ctags支持，生成tags需要加参数：--fields=+IS
"let g:EchoFuncKeyPrev='<C-p>'
"let g:EchoFuncKeyNext='<C-n>'
"let g:EchoFuncLangsUsed = ["c","java","cpp"]

" c-support
" 修改默认触发键从'\'改为';'
let mapleader = '\'

" set help language
set helplang=cn

" SuperTab
"let g:SuperTabDefaultCompletionType="context"
"let g:SuperTabMappingForward = '<c-space>'
"let g:SuperTabMappingBackward = '<s-c-space>'
"let g:SuperTabDefaultCompletionType = '<c-x><c-u>'

" Trigger configuration
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'
let g:UltiSnipsListSnippets = '<C-Tab>'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="context"
"let g:UltiSnipsEditSplit="vertical"

" YouCompleter
let g:ycm_show_diagnostics_ui = 0 "开启YCM的显示诊断信息的功能，0表示关闭
let g:ycm_enable_diagnostic_signs = 1 "高亮显示YCM诊断对应的内容，如果关闭，则会关闭错误和警告高亮功能，0表示关闭
let g:ycm_enable_diagnostic_highlighting = 1 "高亮显示代码中与诊断信息有关的文本或代码，0表示关闭
let g:ycm_echo_current_diagnostic = 1 "当光标移到所在行时显示诊断信息
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
let g:ycm_complete_in_comments = 1 "在注释输入中也能补全
let g:ycm_complete_in_strings = 1 "在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口"
set completeopt=longest,menu "让Vim的补全菜单行为与一般IDE一致"
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
nnoremap <Leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <Leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <Leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F3> :YcmDiags<CR>
"
"" configure syntastic syntax checking to check on open as well as save
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"let g:syntastic_always_populate_loc_list = 0
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
"let g:ycm_confirm_extra_conf = 0
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

" minBuf
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1 
let g:miniBufExplForceSyntaxEnable = 1  
let g:miniBufExplorerMoreThanOne=2 
map <F7> :cn<cr>
map <F8> :cp<cr>

" shell set
set shell=/bin/sh

set encoding=utf-8
set termencoding=utf-8

"支持编码格式
set fileencodings=utf-8,ucs-bom,chinese,latin-1

"开启语法颜色
syntax enable
syntax on

"英文单词在换行是不被折断
set linebreak 

"光标可以定位没有实际字符的位置
"设置为all可以让光标定位到任何位置
set ve=block

"不要换行
set nowrap

"Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

"Numbers
set number
set numberwidth=5
set relativenumber

set history=50
set ruler

set matchpairs+=<:>

"高亮搜索
set hlsearch

"逐步搜索
set incsearch
"set noincsearch

"关闭遇到错误时的声音提示
set noerrorbells

"关闭闪烁
set novisualbell

"设置显示空格和tab键
"set list listchars=tab:>-,trail:-

set vb t_vb= 

" Highlight current line
"au WinLeave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

"高亮显示匹配的括号
set showmatch

"设置代码折叠方式
"set foldmethod=syntax
set foldmethod=marker

"写备份但关闭vim后删除
set writebackup

"修改一个文件后自动进行备份,备份的文件名为原文件名加"~"后缀
"nobackup关闭此项功能
set nobackup

""显示日期的缩写
iab xdate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>

"在行与段开始使用制表符
set smarttab

"读取文件时TAB长度
set tabstop=2
"换行时自动缩进列数，包括使用>> <<缩进
set shiftwidth=2
"insert模式下tab长度
set softtabstop=2
"默认不替换tab为空白
set noexpandtab

"是否产生.swp后缀文件
"set noswapfile
set swapfile

"敲入多少个字符后刷新swap文件
set updatecount=400

"刷新后的超时时间:50s
set updatetime=50000

"检索时忽略大小写
set ignorecase

"继承前一行的缩进方式，特别适用于多行注释 
set autoindent

"使用C样式的缩进
set cindent

"为C程序提供自动缩进
set smartindent

"设置在粘贴的时候不自动缩进
"set paste 
set pastetoggle=<F2>

"文件在vim之外被修改过，自动重新读入
set autoread

"使能鼠标
set mouse=a 

"selectmode = mouse
set selectmode=mouse

"设置显示正在输入的命令
set showcmd
"设置命令行的高度
set cmdheight=1

"标签栏设置----------开始
"set clipboard+=unnamed
"set showtabline=2
set tabpagemax=20

"标签栏快捷键
"跳到下一个标签
map tn :tabnext<cr>
"跳到上一个标签
map tp :tabprevious<cr>

"打开一个新标签
map td :tabnew .<cr>
"在新标签编辑文件
map te :tabedit

"关闭其他所有标签
map to :tabo <cr>
"关闭当前标签
map tc :tabclose<cr>

"移动标签，tm 0:移动标签到第一个，不加参数移动到最后
map tm :tabm

"跳到第一个标签
map tr :tabfirst
"跳到最后一个标签
map tl :tablast
"标签栏设置----------结束

"在所有标签同时执行命令
"tabdo %s/haha/tst/g

"光标移动到buffer的顶部和底部时保持3行距离 
set scrolloff=3

"总是显示状态行
set laststatus=2

"Shift+F12 删除所有行未尾空格
nmap <S-F12> :%s,/s/+$,,g<CR>

"j,k映射为gj和gk，按虚拟行移动
nmap j gj
nmap k gk
"当j,k前面有数字是按实际行移动
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

"状态行格式
set statusline=\ [PWD]\ %r%{CurrectDir()}%h\ \ [File]\ %f%m%r%h\ %w\ %=[L\ %l,R\ %c,T\ %L]\ %=\ %P
set cul

function! CurrectDir()
    let curdir = substitute(getcwd(), "", "", "g")
    return curdir
endfunction

if has("multi_byte")
    set encoding=utf-8
    set termencoding=utf-8
    set formatoptions+=mM
    set fencs=utf-8,gbk

    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif

    if has("win32")
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif
func Maximize_Window()
endfunc

"scheme
if has("gui_running")
	let Tlist_Auto_Open=1 
	colorscheme desert
	set cursorline
    if has("win32")
        set gfn=Raize
        au GUIEnter * simalt ~x
    else
        set guifont=13
    autocmd GUIEnter * winpos 0 0 | set lines=50 columns=100
    endif
else
	let g:molokai_original = 1
	let g:rehash256 = 1
    colorscheme molokai
endif

if has("autocmd")
    filetype plugin indent on
    augroup vimrcEx
        au!
        autocmd FileType text setlocal textwidth=80
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal g`\"" |
                    \ endif
    augroup END
endif

"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
 "如果文件类型为.sh文件 
 if &filetype == 'sh' 
  call setline(1,"\#########################################################################") 
  call append(line("."), "\# File Name: ".expand("%")) 
  call append(line(".")+1, "\# Author: BinXu") 
  call append(line(".")+2, "\# mail: binx@xx.com") 
  call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
  call append(line(".")+4, "\#########################################################################") 
  call append(line(".")+5, "\#!/bin/bash") 
  call append(line(".")+6, "") 
 else 
  call setline(1, "/*************************************************************************") 
  call append(line("."), " > File Name: ".expand("%")) 
  call append(line(".")+1, " > Author: BinX") 
  call append(line(".")+2, " > Mail: binx@xx.com ") 
  call append(line(".")+3, " > Created Time: ".strftime("%c")) 
  call append(line(".")+4, " ************************************************************************/") 
  call append(line(".")+5, "")
 endif
 if &filetype == 'cpp'
  call append(line(".")+6, "#include<iostream>")
  call append(line(".")+7, "using namespace std;")
  call append(line(".")+8, "")
 endif
 if &filetype == 'c'
  call append(line(".")+6, "#include<stdio.h>")
  call append(line(".")+7, "")
 endif
 " if &filetype == 'java'
 "  call append(line(".")+6,"public class ".expand("%"))
 "  call append(line(".")+7,"")
 " endif
 "新建文件后，自动定位到文件末尾
 autocmd BufNewFile * normal G
endfunc 

"map <F10> :VSTreeExplore<cr>
"map <F11> :x<cr>
"map <F12> :q!<cr>
"定义CompileRun函数，用来调用进行编译和运行
map <F5> :call CompileRun()<CR> 
func CompileRun()
exec "w"
"C程序
if &filetype == 'c'
    exec "!gcc %  -o %<"
    exec "!./%<"
endif
endfunc 

set cscopequickfix=s-,c-,d-,i-,t-,e-
if has("cscope")
	set csprg=/usr/bin/cscope

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cst

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=1
	set cspc=3

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out  
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose  


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.  
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>    


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>    

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>    
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>    


    " Hitting CTRL-space *twice* before the search type does a vertical 
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>    
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout 
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout 
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

endif

"开启文件类型识别，并使用对应缩进方式
filetype plugin indent on

"文件为C,CPP时替换tab为空白
autocmd FileType c,cpp set shiftwidth=2 | set expandtab

"文件为PHP时作如下设置
autocmd FileType php setl shiftwidth=4 tabstop=4 softtabstop=4 expandtab

" Tagbar
nmap <F6> :TagbarToggle<CR>
let g:tagbar_ctags_bin='/usr/bin/ctags'
let g:tagbar_width=30
let g:tagbar_autofocus=1
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

"-- Taglist setting --
"map <F6> :TlistToggle<CR>		"打开tag列表
"let Tlist_Ctags_Cmd='/usr/bin/ctags'
"let Tlist_Show_One_File=1    "只显示当前文件的tags
"let Tlist_WinWidth=30        "设置taglist宽度
"let Tlist_Exit_OnlyWindow=1  "tagList窗口是最后一个窗口，则退出Vim
"let Tlist_Use_Right_Window=1 "在Vim窗口右侧显示taglist窗口
"let Tlist_Auto_Open = 1

set tags=tags
set tags+=./tags
